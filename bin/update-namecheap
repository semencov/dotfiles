#!/usr/bin/env bash
################################################################################
# update-namecheap - simple script for updating Namecheap's dynamic DNS service.
#
# Dependencies: curl (should be found almost everywhere)
#
# Version 1
# Matthew Malensek <matt@malensek.net>
################################################################################

unset username password ip output
update_url='dynamicdns.park-your-domain.com/update'

print_usage() {
    cat <<EOM
Updates the Namecheap dynamic DNS for a given host.  Dynamic DNS must be turned
on in the Namecheap settings.

    Usage:

        $(basename ${0}) -u <username> -p <password> [-i ip_addr] [-v] host

    Options:

        -u Namecheap dynamic DNS username (domain name) e.g., somewhere.org
        -p dynamic DNS password (long alphanumeric string generated by Namecheap)
        -i ip address (optional).  If not provided, the requesting IP is used.
        -v verbose (optional).  Just print update URL.

    host - the hostname to update, for instance when updating
    site.somewhere.org, host will be 'site.'  To update the base hostname,
    provide '@'.  You may also have a '*' record set up that can be changed.

    Examples:

        $(basename ${0}) -u somewhere.org -p abc123etcetc mysite
        $(basename ${0}) -u somewhere.org -p abc123etcetc @
        $(basename ${0}) -u somewhere.org -p abc123etcetc -i 127.0.0.1 othersite
        $(basename ${0}) -u somewhere.org -p abc123etcetc -i 127.0.0.1 -v somesite
EOM
}

read_xml() {
    local IFS=\>
    read -d \< tag value
}

while getopts "u:p:i::v" flag; do
    case $flag in
    u) username=${OPTARG} ;;
    p) password=${OPTARG} ;;
    i) ip=${OPTARG} ;;
    v) output=true ;;
    ?)
        print_usage
        exit 1
        ;;
    esac
done

if [[ -z "${username}" || -z "${password}" ]]; then
    echo "A username (-u) and password (-p) must be specified."
    echo
    print_usage
    exit 1
fi

shift $(($OPTIND - 1))

host=${1}
if [[ -z ${1} ]]; then
    echo "No host specified to update!"
    echo
    print_usage
    exit 1
fi

if [[ -z ${ip} ]]; then
    ip=$(ip-wan)
fi

url="https://${update_url}?host=${host}&domain=${username}&password=${password}&ip=${ip}"

if [ "$output" = true ]; then
    echo $url
    exit
else
    response=$(curl "${url}" 2>/dev/null)
    errors=0

    while read_xml; do
        if [[ "${tag}" == "ErrCount" ]]; then
            errors=${value}

            if [[ ${errors} -eq 0 ]]; then
                # There were no errors; we are done.
                echo "Host ${host}.${username} binded to ${ip} successfully."
                exit 0
            fi
            continue
        fi

        if [[ ${errors} -gt 0 && "${tag}" == "Err"* ]]; then
            echo 1>&2 "ERROR: ${value}"
        fi
    done <<<"${response}"
fi

# If execution reaches this point, errors were listed. Set a failed exit code.
exit 1

[user]
	name = Yuri Sementsov
	email = hello@smcv.dev
  signingkey = AAF13C9A
[core]
  editor = nano
  pager = diff-so-fancy | less --chop-long-lines --quit-if-one-screen --no-init --tabs=1,5 -R
  excludesfile = ~/.gitignore
  include = ~/.gitlocal
  autocrlf = input
  safecrlf = false
  preloadindex = true
[http]
  sslVerify = false
[credential]
	helper = osxkeychain
[gpg]
  program = gpg
[log]
  decorate = short
[color]
  diff   = auto
  status = auto
  branch = auto
[branch]
  autosetuprebase = always
[push]
  default = current
[commit]
  gpgsign = false
[fetch]
  prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[alias]
  a  = "!git add . && git st"
  ua = reset HEAD
  c = commit
  ca = commit -a
  cam = commit -am
  am = commit --amend
  co = checkout
  d = diff --color-words
  st = status -sb
  cp = cherry-pick
  skip = rebase --skip
  abort = rebase --abort
  cont = "!git add . && git rebase --continue"
  current = rev-parse --abbrev-ref HEAD
  l = log --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset' --abbrev-commit
  ll = log --stat --abbrev-commit
  wtf = diff --name-only --diff-filter=U
  pl = "!git pull origin $(git current) --rebase"
  ph  = "!git push origin $(git current)"
  yolo = "!git commit -am \"$(curl -s whatthecommit.com/index.txt)\""
  patch = "!git --no-pager diff --no-color"
  master = "!git checkout master && git pull origin master --rebase"
  new = checkout -b
  done = "!git add . && git commit -a && git git push -u origin $(git current)"
  purge = "!git push --delete origin $1 && git branch -D $1"
  # Merge fresh master into the current branch
  mmm = "!git fetch origin master && git merge origin/master --no-edit"
  up = "!git fetch; git rebase --autostash FETCH_HEAD"
  # List of my own commits
  my = "!git log --branches=* --no-merges --pretty=format:'%C(yellow)%h %C(blue)%cd %C(reset)%C(white)%s' --date=short --author=\"$(git config user.name)\""
  # List of branches ordered by last change
  branches = for-each-ref --sort=-committerdate refs/heads/ --format='%(color:bold)%(refname:short)%(color:reset)\t%(committername), %(committerdate:relative)'
  # Rebase: add changes and continue
  # Cancel local commits in the branch: git fuck master
  fuck = "!f() { git reset --hard origin/$1; }; f"
